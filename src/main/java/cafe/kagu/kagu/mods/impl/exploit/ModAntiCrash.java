/**
 * 
 */
package cafe.kagu.kagu.mods.impl.exploit;

import cafe.kagu.kagu.eventBus.EventHandler;
import cafe.kagu.kagu.eventBus.Handler;
import cafe.kagu.kagu.eventBus.impl.EventPacketReceive;
import cafe.kagu.kagu.mods.Module;
import cafe.kagu.kagu.settings.impl.BooleanSetting;
import cafe.kagu.kagu.settings.impl.DoubleSetting;
import cafe.kagu.kagu.settings.impl.ModeSetting;
import cafe.kagu.kagu.utils.ChatUtils;
import net.minecraft.client.Minecraft;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.network.play.server.S18PacketEntityTeleport;
import net.minecraft.network.play.server.S27PacketExplosion;
import net.minecraft.util.ChatComponentText;

/**
 * @author lavaflowglow
 *
 */
public class ModAntiCrash extends Module {
	
	public ModAntiCrash() {
		super("AntiCrash", Category.EXPLOIT);
		setSettings(warning, motionCrash, maxMotion, motionHandling, positionCrash, positionHandling, potionCrash);
	}
	
	private BooleanSetting warning = new BooleanSetting("Warn When Crash Attempt", true);
	
	// Motion crashes
	private BooleanSetting motionCrash = new BooleanSetting("Anti Motion Crash", false);
	private DoubleSetting maxMotion = (DoubleSetting) new DoubleSetting("Max Motion", 100, 50, 10000, 50).setDependency(() -> motionCrash.isEnabled());
	private ModeSetting motionHandling = (ModeSetting) new ModeSetting("Handle Motion Crash", "No Motion", "No Motion", "Drop Packet", "Disconnect").setDependency(() -> motionCrash.isEnabled());
	
	// Position crashes
	private BooleanSetting positionCrash = new BooleanSetting("Anti Position Crash", false);
	private ModeSetting positionHandling = (ModeSetting) new ModeSetting("Handle Position Crash", "Drop Packet", "Drop Packet", "Disconnect").setDependency(() -> positionCrash.isEnabled());
	
	// Potion icon crashes
	private BooleanSetting potionCrash = new BooleanSetting("Anti Icon Crash", false);
	
	@EventHandler
	private Handler<EventPacketReceive> onPacketReceive = e -> {
		if (e.isPost())
			return;
		
		// Motion Crashes
		if (motionCrash.isEnabled()) {
			double motionMax = maxMotion.getValue();
			
			// S27 checks and handling
			if (e.getPacket() instanceof S27PacketExplosion) {
				S27PacketExplosion s27 = (S27PacketExplosion)e.getPacket();
				
		        if (Math.abs(s27.getMotionX() + Minecraft.getMinecraft().thePlayer.motionX) > motionMax) {
		        	
		        	// Warning
		        	if (warning.isEnabled())
						ChatUtils.addChatMessage("Server may be trying to crash you, detected abnormal motion x in S27. Value: "
								+ s27.getMotionX() + ", check value: " + Math.abs(s27.getMotionX() + Minecraft.getMinecraft().thePlayer.motionX));
		        	
		        	// Handle
		        	switch (motionHandling.getMode()) {
						case "No Motion":{
							s27.setMotionX(0);
						}break;
						case "Drop Packet":{
							e.cancel();
						}break;
						case "Disconnect":{
							e.cancel();
							mc.getNetHandler().onDisconnect(new ChatComponentText("[AntiCrash] abnormal motion x in S27"));
						}return;
					}
		        	
		        }
		        if (Math.abs(s27.getMotionY() + Minecraft.getMinecraft().thePlayer.motionY) > motionMax) {
		        	
		        	// Warning
		        	if (warning.isEnabled())
						ChatUtils.addChatMessage("Server may be trying to crash you, detected abnormal motion y in S27. Value: "
								+ s27.getMotionY() + ", check value: " + Math.abs(s27.getMotionY() + Minecraft.getMinecraft().thePlayer.motionY));
		        	
		        	// Handle
		        	switch (motionHandling.getMode()) {
						case "No Motion":{
							s27.setMotionY(0);
						}break;
						case "Drop Packet":{
							e.cancel();
						}break;
						case "Disconnect":{
							e.cancel();
							mc.getNetHandler().onDisconnect(new ChatComponentText("[AntiCrash] abnormal motion y in S27"));
						}return;
					}
		        	
		        }
		        if (Math.abs(s27.getMotionZ() + Minecraft.getMinecraft().thePlayer.motionZ) > motionMax) {
		        	
		        	// Warning
		        	if (warning.isEnabled())
						ChatUtils.addChatMessage("Server may be trying to crash you, detected abnormal motion z in S27. Value: "
								+ s27.getMotionZ() + ", check value: " + Math.abs(s27.getMotionZ() + Minecraft.getMinecraft().thePlayer.motionZ));
		        	
		        	// Handle
		        	switch (motionHandling.getMode()) {
						case "No Motion":{
							s27.setMotionZ(0);
						}break;
						case "Drop Packet":{
							e.cancel();
						}break;
						case "Disconnect":{
							e.cancel();
							mc.getNetHandler().onDisconnect(new ChatComponentText("[AntiCrash] abnormal motion z in S27"));
						}return;
					}
		        	
		        }
		        
			}
			
			// S12 checks and handling
			else if (e.getPacket() instanceof S12PacketEntityVelocity) {
				S12PacketEntityVelocity s12 = (S12PacketEntityVelocity)e.getPacket();
				if (s12.getEntityID() != mc.thePlayer.getEntityId())
					return;
				
		        if (Math.abs(s12.getMotionX() / 8000d) > motionMax) {
		        	
		        	// Warning
		        	if (warning.isEnabled())
		        		ChatUtils.addChatMessage("Server may be trying to crash you, detected abnormal motion x in S12 (" + s12.getMotionX() / 8000d + ")");
		        	
		        	// Handle
		        	switch (motionHandling.getMode()) {
						case "No Motion":{
							s12.setMotionX(0);
						}break;
						case "Drop Packet":{
							e.cancel();
						}break;
						case "Disconnect":{
							e.cancel();
							mc.getNetHandler().onDisconnect(new ChatComponentText("[AntiCrash] abnormal motion x in S12"));
						}return;
					}
		        	
		        }
		        if (Math.abs(s12.getMotionY() / 8000d) > motionMax) {
		        	
		        	// Warning
		        	if (warning.isEnabled())
		        		ChatUtils.addChatMessage("Server may be trying to crash you, detected abnormal motion y in S12 (" + s12.getMotionY() / 8000d + ")");
		        	
		        	// Handle
		        	switch (motionHandling.getMode()) {
						case "No Motion":{
							s12.setMotionY(0);
						}break;
						case "Drop Packet":{
							e.cancel();
						}break;
						case "Disconnect":{
							e.cancel();
							mc.getNetHandler().onDisconnect(new ChatComponentText("[AntiCrash] abnormal motion y in S12"));
						}return;
					}
		        	
		        }
		        if (Math.abs(s12.getMotionZ() / 8000d) > motionMax) {
		        	
		        	// Warning
		        	if (warning.isEnabled())
		        		ChatUtils.addChatMessage("Server may be trying to crash you, detected abnormal motion z in S12 (" + s12.getMotionZ() / 8000d + ")");
		        	
		        	// Handle
		        	switch (motionHandling.getMode()) {
						case "No Motion":{
							s12.setMotionZ(0);
						}break;
						case "Drop Packet":{
							e.cancel();
						}break;
						case "Disconnect":{
							e.cancel();
							mc.getNetHandler().onDisconnect(new ChatComponentText("[AntiCrash] abnormal motion z in S12"));
						}return;
					}
		        	
		        }
			}
			
		}
		
		// Position Crashes
		if (positionCrash.isEnabled()) {
			if (e.getPacket() instanceof S08PacketPlayerPosLook) {
				S08PacketPlayerPosLook s08 = (S08PacketPlayerPosLook)e.getPacket();
				double max = 30000000;
				if (Math.abs(s08.getX()) >= max || Math.abs(s08.getY()) >= max || Math.abs(s08.getZ()) >= max
						|| Double.isNaN(s08.getX()) || Double.isNaN(s08.getY()) || Double.isNaN(s08.getZ())
						|| Double.isInfinite(s08.getX()) || Double.isInfinite(s08.getY()) || Double.isInfinite(s08.getZ())) {
					
		        	// Warning
		        	if (warning.isEnabled())
		        		ChatUtils.addChatMessage("Server may be trying to crash you, detected abnormal position in S08 (" + s08.getX() + ", " + s08.getY() + ", " + s08.getZ() + ")");
					
					// Handle
					switch (positionHandling.getMode()) {
						case "Drop Packet":{
							e.cancel();
						}break;
						case "Disconnect":{
							e.cancel();
							mc.getNetHandler().onDisconnect(new ChatComponentText("[AntiCrash] abnormal position packet (" + s08.getX() + ", " + s08.getY() + ", " + s08.getZ() + ")"));
						}return;
					}
					
				}
			}
		}
		
	};
	
	/**
	 * @return the warning
	 */
	public BooleanSetting getWarning() {
		return warning;
	}
	
	/**
	 * @return the potionCrash
	 */
	public BooleanSetting getPotionCrash() {
		return potionCrash;
	}
	
}
